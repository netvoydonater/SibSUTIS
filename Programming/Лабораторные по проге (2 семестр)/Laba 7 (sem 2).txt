#include <iostream>
#include <locale>
#include <ctime>
using namespace std;

int Random(int a, int b)
{
    if (a > 0) return a + rand() % (b - a);
    else return a + rand() % (abs(a) + b);
}

void PrintSum(int** Arr, int size)
{
    for (int i = 0; i < size; i++)
    {
        int n = Arr[i][0];
        int Sum = 0;
        for (int j = 0; j < n; j++)
        {
            Sum += Arr[i][j];
        }
        cout << "Сумма элементов " << i + 1 << " строки " << ": " << Sum << endl;
    }
}

int main() 
{
    setlocale(LC_ALL, "ru");
    srand(time(NULL));
    int** Arr = new int* [5];
    for (int i = 0; i < 5; i++)
    {
        int n = Random(2, 11);
        Arr[i] = new int[n];
        for (int j = 0; j < n; j++)
        {
            Arr[i][j] = rand() % 11;
            Arr[i][0] = n;
            cout << Arr[i][j] << '\t';
        }
        cout << endl;
    }

    PrintSum(Arr, 5);

    for (int i = 0; i < 5; i++)
    {
        delete[] Arr[i];
    }
    delete[] Arr;

    return 0;
}



#include <iostream>
#include <locale>
#include <ctime>
using namespace std;

int Random(int a, int b)
{
    if (a > 0) return a + rand() % (b - a);
    else return a + rand() % (abs(a) + b);
}
void NullMassiv(int* Arr, int size)
{
    int IndexFirstMin = 0;
    int IndexSecondMin = 0;
    int FirstMin = INT_MAX;
    int SecondMin = INT_MAX;
    for (int i = 0; i < size; i++)
    {
        if (Arr[i] < FirstMin)
        {
            SecondMin = FirstMin;
            IndexSecondMin = IndexFirstMin;
            FirstMin = Arr[i];
            IndexFirstMin = i + 1;
        }
        else if (Arr[i] < SecondMin)
        {
            SecondMin = Arr[i];
            IndexSecondMin = i + 1;
        }
    }
    for (int i = 0; i < size; i++)
    {
        if (i > IndexFirstMin - 1 && i < IndexSecondMin - 1 || i > IndexSecondMin - 1 && i < IndexFirstMin - 1)
        {
            Arr[i] = 0;
        }
    }
    cout << FirstMin << " " << IndexFirstMin << '\t' << SecondMin << " " << IndexSecondMin << endl;
}
int main()
{
    setlocale(LC_ALL, "ru");
    srand(time(NULL));
    int n;
    cin >> n;
    int* Massiv = new int[n];
    for (int i = 0; i < n; i++)
    {
        Massiv[i] = Random(-100, 100);
        cout << Massiv[i] << '\t';
    }
    cout << endl;

    NullMassiv(Massiv, n);

    for (int i = 0; i < n; i++)
    {
        cout << Massiv[i] << '\t';
    }
    return 0;
}





#include <iostream>
#include <locale>
#include <ctime>
using namespace std;

int Random(int a, int b)
{
    if (a > 0) return a + rand() % (b - a);
    else return a + rand() % (abs(a) + b);
}
void Sort(int* arr, int size)
{
    for (int i = 0; i < size - 1; ++i)
    {
        for (int j = 0; j < size - i - 1; ++j)
        {
            if (arr[j] < arr[j + 1])
            {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int BinarySearch(int* arr, int size, int target)
{
    int comparisons = 0;
    int left = 0;
    int right = size - 1;
    while (left <= right)
    {
        int mid = left + (right - left) / 2;
        comparisons++;

        if (arr[mid] == target)
        {
            return comparisons;
        }

        if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }

    return comparisons;
}


int LinearSearch(int* arr, int size, int target)
{
    int comparisons = 0;
    for (int i = 0; i < size; i++)
    {
        comparisons++;
        if (arr[i] == target)
        {
            return comparisons;
        }
    }

    return -1;
}




int main()
{
    setlocale(LC_ALL, "ru");
    srand(time(NULL));
    int n; cin >> n;
    int* Massiv = new int[n];

    for (int i = 0; i < n; i++)
    {
        Massiv[i] = Random(-100, 100);
        cout << Massiv[i] << '\t';
    }
    Sort(Massiv, n);
    cout << endl << endl << endl;
    for (int i = 0; i < n; i++)
    {
        cout << Massiv[i] << '\t';
    }
    cout << endl;

    int target; cin >> target;

    cout << "Сравнения при бинарном поиске : " << BinarySearch(Massiv , n , target) << endl;
    cout << "Сравнения при переборе: " << LinearSearch(Massiv , n , target) << endl;
    return 0;
}







